Matthew Yamout cssc1002
James Hammon   cssc0895
Veer Talta     cssc0847

Software Design Document

Our group approached this program by using a mix of sprints and kanban stories. During each sprint we used a white board to visualize our kanban stories. We had three columns drawn on the white board: "Need To Do", "Currently Working On", and "Finished". As we completed each task we'd cross it out in the respective column and move it to the next one. Before each sprint, we determined the goals of each sprint and the requirements needed to complete each sprint successfully. Our program was divided into three major sprints.

In the first sprint we determined the necessary algorithmns that would be needed to solve the problem at hand. During this sprint we thought about what data structures we would require and broke down the project into large general steps. These steps included: reading in and storing the symbol file into memory, parsing the object code, and finally formatting and writing everything out to a file.

The second sprint we focused on reading in the symbol file contents into memory and setting up other data structures. Our group utilized maps heavily in this project to hold our data. We used a map to store the opcodes and their respective instructions, easy hex to decimal conversions, and finally the symbol values. For the symbol values we used the symbol address as the key and a map that consisted of all the symbol's information as the value. Because we used the address as the key this made lookups extremely easy. 

The third and final sprint focused on parsing through the object code and writing it to a file. This sprint was easily the hardest and longest. We tried to break up the the parsing into multiple core methods and a few utility methods (for example hex and string conversions). The parsing algorithmn went like this: determine if the instruction was format 3 or format 4, obtain the opcode, obtain the display, and then write the entire line of code to a vector. Because we held each line of source code in a vector when it was time to write to a file we were able to just iterate through the vector and write each line without any formatting (as this had been done prior). 

To test our program we used the sample files given to us via blackboard. Once our program was able to mirror the given sample.sic file we felt our program was ready for submission. 

Our group relied on pair programming to move quickly through the assignment. By doing this we were able to worry less about keeping the GitHub repository we used updated and focus more on coding. Pair programming allowed our team to bounce ideas off of each other and quickly write code without having to wait to merge code or swift through merge conflictions because everything was predominantly on one computer. 

Therefore, by using sprints and planning our approach in detail, we feel we were able to effectively complete the program.
